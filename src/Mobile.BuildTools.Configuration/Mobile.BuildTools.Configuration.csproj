<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFrameworks>net8.0;net8.0-android;net8.0-ios;net8.0-macos;net8.0-maccatalyst</TargetFrameworks>
    <TargetFrameworks Condition=" $([MSBuild]::IsOSPlatform('windows')) or '$(EnableWindowsTargeting)' == 'true' ">$(TargetFrameworks);net8.0-windows10.0.18362</TargetFrameworks>
    <PackNone>false</PackNone>
    <PackCompile>false</PackCompile>
    <IsPackable>true</IsPackable>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <Description>Provides a Cross Platform implementation of the ConfigurationManager. This allows you to load an app.config from any platform head as well as load custom configs at runtime or transform your configuration at runtime.</Description>
    <LangVersion>Latest</LangVersion>
    <PackageTags>mobile;configuration;appconfig;appconfig.xml</PackageTags>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.Extensions.Configuration.Abstractions" />
    <PackageReference Include="Microsoft.Extensions.Hosting.Abstractions" />
  </ItemGroup>

  <ItemGroup>
    <Compile Remove="Platform/**/*.cs" />
    <None Include="Platform/**/*.cs" />
  </ItemGroup>

  <ItemGroup Condition=" $(TargetFramework.StartsWith('netstandard')) ">
    <None Remove="**/*.netstandard.cs" />
    <Compile Include="**/*.netstandard.cs" />
  </ItemGroup>

  <ItemGroup Condition=" $(TargetFramework) == 'net8.0' ">
    <None Remove="**/*.netstandard.cs" />
    <Compile Include="**/*.netstandard.cs" />
  </ItemGroup>

  <ItemGroup Condition=" $(TargetFramework.StartsWith('MonoAndroid')) ">
    <Reference Include="System.Xml.Linq" />
    <None Remove="**/*.android.cs" />
    <Compile Include="**/*.android.cs" />
  </ItemGroup>

  <ItemGroup Condition=" $([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'android' ">
    <None Remove="**/*.android.cs" />
    <Compile Include="**/*.android.cs" />
  </ItemGroup>

  <ItemGroup Condition=" $(TargetFramework.StartsWith('Xamarin.iOS')) Or $(TargetFramework.StartsWith('Xamarin.Mac')) Or $(TargetFramework.StartsWith('Xamarin.TVOS')) ">
    <Reference Include="System.Xml.Linq" />
    <None Remove="**/*.apple.cs" />
    <Compile Include="**/*.apple.cs" />
  </ItemGroup>

  <ItemGroup Condition=" $([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'ios' OR $([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'maccatalyst' OR $([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'macos' ">
    <None Remove="**/*.apple.cs" />
    <Compile Include="**/*.apple.cs" />
  </ItemGroup>

  <ItemGroup Condition=" $(TargetFramework.StartsWith('Xamarin.Mac')) ">
    <Reference Include="netstandard" />
  </ItemGroup>

  <ItemGroup Condition=" $([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'windows' ">
    <None Remove="**/*.winui.cs" />
    <Compile Include="**/*.winui.cs" />
  </ItemGroup>

  <ItemGroup Condition=" $(TargetFramework.StartsWith('tizen')) ">
    <None Remove="**/*.tizen.cs" />
    <Compile Include="**/*.tizen.cs" />
  </ItemGroup>

  <ItemGroup>
    <None Include="buildTransitive\*.props" Pack="true" PackagePath="buildTransitive\%(Filename)%(Extension)" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="NuGetizer" PrivateAssets="all" />
    <ProjectReference Include="..\Mobile.BuildTools.Core\Mobile.BuildTools.Core.csproj"
                      ReferenceOutputAssembly="false"/>
    <ProjectReference Include="..\Mobile.BuildTools.Configuration.MSBuild\Mobile.BuildTools.Configuration.MSBuild.csproj"
                      ReferenceOutputAssembly="false"
                      PackFolder="build"/>
  </ItemGroup>

</Project>
